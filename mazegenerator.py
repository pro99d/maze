import randomimport jsonclass MazeGenerator:    def __init__(self, width, height):        self.width = width        self.height = height        self.maze = []        self.visited = []    def initialize_maze(self):        # Создание пустого лабиринта с окружающей стеной        self.maze = [['#' for _ in range(self.width + 1)] for _ in range(self.height + 1)]    def generate_path(self, start_x, start_y):        # Направления движения: вниз, вверх, вправо, влево        directions = [(2, 0), (-2, 0), (0, 2), (0, -2)]        directions_rare = [(3, 0), (-3, 0), (0, 3), (0, -3)]        stack = [(start_x, start_y)]        while stack:            x, y = stack.pop()            if random.randint(0, 20000) == 100:                random.shuffle(directions_rare)                for dx, dy in directions_rare:                    nx, ny = x + dx, y + dy                    # Проверка границ и посещенных клеток                    if 1 <= nx < self.height and 1 <= ny < self.width and (nx, ny) not in   self.visited:                        # Создаем проход между текущей и новой клеткой                        self.maze[x + dx // 2][y + dy // 2] = ' '                        self.maze[nx][ny] = ' '                        self.visited.append((nx, ny))                        stack.append((nx, ny))            else:                random.shuffle(directions)  # Перемешиваем направления для случайности                for dx, dy in directions:                    nx, ny = x + dx, y + dy                    # Проверка границ и посещенных клеток                    if 1 <= nx < self.height and 1 <= ny < self.width and (nx, ny) not in self.visited:                        # Создаем проход между текущей и новой клеткой                        self.maze[x + dx // 2][y + dy // 2] = ' '                        self.maze[nx][ny] = ' '                        self.visited.append((nx, ny))                        stack.append((nx, ny))  # Добавляем в стек для дальнейшей обработки    def generate_maze(self):        self.initialize_maze()        # Начальная позиция        start_x = 1        start_y = 1        self.visited.append((start_x, start_y))        self.maze[start_x][start_y] = 'S'  # Устанавливаем старт        # Генерация пути        self.generate_path(start_x, start_y)        self.maze[1][1] = "S"        # Установка выхода в правом нижнем углу лабиринта        exit_x = self.height - 1        exit_y = self.width - 1        self.maze[exit_x][exit_y] = 'F'  # Устанавливаем выход        # Сохранение лабиринта в файл maze.json        with open("maze.json", "w") as file:            json.dump(self.maze, file)# Если вы хотите протестировать библиотеку, вы можете сделать это в отдельном файлеif __name__ == "__main__":    # Пример использования    maze_generator = MazeGenerator(14, 13)    maze_generator.generate_maze()    print("Лабиринт сохранён в maze.json")